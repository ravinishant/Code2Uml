/*
 * UnitsPanel.java
 *
 * Created on August 6, 2007, 5:26 PM
 *
 * Copyright 2007 Mateusz Wenus
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.sourceforge.code2uml.view;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JTabbedPane;
import javax.swing.tree.DefaultTreeModel;
import net.sourceforge.code2uml.controller.Controller;
import net.sourceforge.code2uml.controller.ControllerFactory;
import net.sourceforge.code2uml.unitdata.UnitInfo;

/**
 * Represents second of tabbed panes in user interface. Allows user to choose 
 * which of classes/interfaces/enums found in files chosen in the first step
 * will be included in the diagram. Must be added to JTabbedPane.
 *
 * @author Mateusz Wenus
 */
public class UnitsPanel extends javax.swing.JPanel implements Observer {
    
    private Controller controller = ControllerFactory.getInstance();
    private Map<String, CheckTreeNode> unitNode = new HashMap<String, CheckTreeNode>();
    
    /** 
     * Creates new form UnitsPanel.
     */
    public UnitsPanel() {
        initComponents();
        controller.addObserver(this);
        setBGThreadWorking(false);
    }
     
    /** 
     * Retrieves UnitInfos from Controller when it reads them from files
     * chosen in the previous step. Adds names of those units to the
     * list.
     *
     * @param o observable whose state changed
     * @param arg notification argument (UnitInfos)
     */
    public void update(Observable o, Object arg) {
        if(o == controller && arg instanceof Object[]) {
            Object[] tab = (Object[]) arg;
            int n = (Integer) tab[0];
            if(n == Controller.NAMES_RESULT) {
                initCheckTree((Collection<String>) tab[1]);
                setAsSelected();
            } else if (n == Controller.UNITS_RESULT) {
                setBGThreadWorking(false);
            }
        }
    }
    
    /**
     * Returns a collection of qualified names of classes/interfaces/enums 
     * which the user wants to include in the diagram.
     *
     * @return a collection of qualified names of classes/interfaces/enums 
     *         which the user wants to include in the diagram
     */
    public Collection<String> getSelectedNames() {
        Collection<String> result = new ArrayList<String>();
        for(String name : unitNode.keySet()) {
            if(unitNode.get(name).isSelected()) {
                result.add(name);
            }
        }
        return result;
    }
    
    /**
     * Sets this panel as active tabbed pane.
     */
    private void setAsSelected() {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JTabbedPane parent = (JTabbedPane) getParent();
                parent.setSelectedComponent(self());
            }
        });
    }
    
    /**
     * Constructs a new check tree from values in <code>names</code>. The
     * structure of the tree reflects the package structure of 
     * classes/interfaces/enums which names are in <code>names</code>. All
     * nodes are selected, apart from those which have '$' character in their
     * names (those are generated by the compiler and usually not 
     * interesting enough to show on UML diagram).
     */
    private void initCheckTree(final Collection<String> names) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                /*unitNode.clear();
                CheckTreeNode root = new CheckTreeNode("root", false);
                Map<String, CheckTreeNode> packageMap = new HashMap<String, CheckTreeNode>();
                for(String name : names) {
                    String packageName = name.substring(0, name.lastIndexOf('.'));
                    String simpleName = name.substring(name.lastIndexOf('.') + 1);
                    CheckTreeNode packageNode = packageMap.get(packageName);
                    if(packageNode == null) {
                        packageNode = new CheckTreeNode(packageName, true);
                        packageMap.put(packageName, packageNode);
                        root.add(packageNode);
                    }
                    CheckTreeNode node = new CheckTreeNode(simpleName, !simpleName.contains("$"));
                    unitNode.put(name, node);
                    packageNode.add(node);
                }
                DefaultTreeModel model = new DefaultTreeModel(root);
                checkTree.setModel(model);*/
                unitNode = checkTree.createModel(names);
            }
        });
    }
    
    /**
     * Enables and disable graphical components on this panel when the
     * background thread is or is not working.
     *
     * @param b true if and only if the background thread is working
     */
    private void setBGThreadWorking(final boolean b) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                jProgressBar1.setVisible(b);
                nextButton.setEnabled(!b);
                previousButton.setEnabled(!b);
            }
        });
    }
    
    /**
     * Helper method for inner class.
     *
     * @return this UnitsPanel
     */
    private UnitsPanel self() {
        return this;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        checkTreePane = new javax.swing.JScrollPane();
        checkTree = new net.sourceforge.code2uml.view.PackageCheckTree();
        progressBarPanel = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();

        jLabel1.setBackground(java.awt.SystemColor.control);
        jLabel1.setText("These are classes, interfaces and enums found in given files.");

        jLabel2.setText("Choose those which should be included in the diagram.");

        checkTree.setShowsRootHandles(true);
        checkTreePane.setViewportView(checkTree);

        jProgressBar1.setStringPainted(true);

        javax.swing.GroupLayout progressBarPanelLayout = new javax.swing.GroupLayout(progressBarPanel);
        progressBarPanel.setLayout(progressBarPanelLayout);
        progressBarPanelLayout.setHorizontalGroup(
            progressBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
        );
        progressBarPanelLayout.setVerticalGroup(
            progressBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        previousButton.setText("Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkTreePane, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(previousButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressBarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextButton))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {nextButton, previousButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkTreePane, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(progressBarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(previousButton)
                    .addComponent(nextButton))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {nextButton, previousButton, progressBarPanel});

    }// </editor-fold>//GEN-END:initComponents
    
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        setBGThreadWorking(true);
        JTabbedPane parent = (JTabbedPane) getParent();
        //parent.setSelectedIndex(parent.getSelectedIndex() + 1);
        FilesPanel filesPanel = (FilesPanel) parent.getComponentAt(parent.getSelectedIndex() - 1);
        controller.processFiles(filesPanel.getSelectedFiles(), getSelectedNames(), jProgressBar1);
    }//GEN-LAST:event_nextButtonActionPerformed
    
    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        JTabbedPane parent = (JTabbedPane) getParent();
        parent.setSelectedIndex(parent.getSelectedIndex() - 1);
    }//GEN-LAST:event_previousButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private net.sourceforge.code2uml.view.PackageCheckTree checkTree;
    private javax.swing.JScrollPane checkTreePane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JPanel progressBarPanel;
    // End of variables declaration//GEN-END:variables
    
}
